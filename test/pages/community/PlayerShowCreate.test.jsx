import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { BrowserRouter } from 'react-router-dom';

// Mock react-router-dom
const mockNavigate = vi.fn();
const mockLocation = { state: null };
vi.mock('react-router-dom', () => ({
  useNavigate: () => mockNavigate,
  useLocation: () => mockLocation,
  BrowserRouter: ({ children }) => <div data-testid="browser-router">{children}</div>,
}));

// Mock axios
const mockApi = {
  get: vi.fn(),
  post: vi.fn(),
};
vi.mock('../../../src/utils/axios', () => ({
  default: mockApi,
}));

// Mock react-toastify
vi.mock('react-toastify', () => ({
  toast: {
    success: vi.fn(),
    error: vi.fn(),
  },
}));

// Mock localStorage
const localStorageMock = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
};
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock,
  writable: true,
});

const renderWithRouter = (component) => {
  return render(
    <BrowserRouter>
      {component}
    </BrowserRouter>
  );
};

const mockUser = {
  id: 1,
  username: 'testuser',
  email: 'test@example.com',
};

const mockPrizes = [
  {
    id: 1,
    name: 'ÊµãËØïÂ•ñÂìÅ1',
    image: '/prize1.jpg',
    order_item_id: 101,
    order_id: 'ORDER001',
    opened_at: '2024-01-01T10:00:00Z',
  },
  {
    id: 2,
    name: 'ÊµãËØïÂ•ñÂìÅ2',
    image: '/prize2.jpg',
    order_item_id: 102,
    order_id: 'ORDER002',
    opened_at: '2024-01-02T10:00:00Z',
  },
];

const mockOrders = [
  {
    order: { id: 'ORDER001' },
    items: [
      {
        id: 101,
        is_opened: true,
        opened_at: '2024-01-01T10:00:00Z',
        item: mockPrizes[0],
      },
    ],
  },
  {
    order: { id: 'ORDER002' },
    items: [
      {
        id: 102,
        is_opened: true,
        opened_at: '2024-01-02T10:00:00Z',
        item: mockPrizes[1],
      },
    ],
  },
];

describe('PlayerShowCreate Component', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    localStorageMock.getItem.mockReturnValue(JSON.stringify(mockUser));
    mockApi.get.mockResolvedValue({ data: mockOrders });
    mockApi.post.mockResolvedValue({ data: { success: true } });
  });

  describe('Âü∫Êú¨Ê∏≤Êüì', () => {
    it('Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìÁé©ÂÆ∂ÁßÄÂàõÂª∫È°µÈù¢', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        expect(screen.getByText('üéâ ÂèëÂ∏ÉÁé©ÂÆ∂ÁßÄ')).toBeInTheDocument();
        expect(screen.getByText('ÂàÜ‰∫´ÊÇ®ÁöÑÁõ≤ÁõíÂºÄÁÆ±‰ΩìÈ™åÔºåÂ±ïÁ§∫ÊÇ®ÁöÑÂπ∏ËøêÊó∂Âàª')).toBeInTheDocument();
      });
    });

    it('Â∫îËØ•ÊòæÁ§∫È°µÈù¢Ê†áÈ¢òÂíåÊ≠•È™§', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        expect(screen.getByText('ÈÄâÊã©Ë¶ÅÂ±ïÁ§∫ÁöÑÂ•ñÂìÅ')).toBeInTheDocument();
        expect(screen.getByText('Ê∑ªÂä†ÂõæÁâá')).toBeInTheDocument();
        expect(screen.getByText('ÂàÜ‰∫´‰ΩìÈ™å')).toBeInTheDocument();
      });
    });
  });

  describe('Áî®Êà∑ÊùÉÈôê', () => {
    it('Êú™ÁôªÂΩïÁî®Êà∑Â∫îËØ•Ë∑≥ËΩ¨Âà∞ÁôªÂΩïÈ°µ', async () => {
      localStorageMock.getItem.mockReturnValue(null);
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      expect(mockNavigate).toHaveBeenCalledWith('/login');
    });

    it('Â∫îËØ•ËÉΩÂ§üËé∑ÂèñÁî®Êà∑‰ø°ÊÅØ', async () => {
      localStorageMock.getItem.mockReturnValue(JSON.stringify(mockUser));
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      expect(localStorageMock.getItem).toHaveBeenCalledWith('user');
    });
  });

  describe('Â•ñÂìÅËé∑Âèñ', () => {
    it('Â∫îËØ•ËÉΩÂ§üËé∑ÂèñÁî®Êà∑Â•ñÂìÅÂàóË°®', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        expect(mockApi.get).toHaveBeenCalledWith('/api/pay/order/completed', {
          params: { user_id: mockUser.id }
        });
      });
    });

    it('Â∫îËØ•ÊòæÁ§∫Â•ñÂìÅÂàóË°®', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        expect(screen.getByText('ÊµãËØïÂ•ñÂìÅ1')).toBeInTheDocument();
        expect(screen.getByText('ÊµãËØïÂ•ñÂìÅ2')).toBeInTheDocument();
      });
    });

    it('Ê≤°ÊúâÂ•ñÂìÅÊó∂Â∫îËØ•ÊòæÁ§∫ÊèêÁ§∫‰ø°ÊÅØ', async () => {
      mockApi.get.mockResolvedValue({ data: [] });
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        expect(screen.getByText('ÊöÇÊó†ÂèØÊôíÂçïÂ•ñÂìÅ')).toBeInTheDocument();
        expect(screen.getByText('ÂéªÊäΩÁõ≤Áõí')).toBeInTheDocument();
      });
    });

    it('Â∫îËØ•ËÉΩÂ§üÈÄâÊã©Â•ñÂìÅ', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        const prize1 = screen.getByText('ÊµãËØïÂ•ñÂìÅ1');
        fireEvent.click(prize1);
      });
    });
  });

  describe('Ë°®Âçï‰∫§‰∫í', () => {
    it('Â∫îËØ•ËÉΩÂ§üËæìÂÖ•ÂÜÖÂÆπ', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        const textarea = screen.getByPlaceholderText('ÂàÜ‰∫´‰Ω†ÁöÑÂºÄÁõí‰ΩìÈ™åÔºåÊèèËø∞‰∏Ä‰∏ã‰Ω†ÁöÑÂøÉÊÉÖÂíåÊÑüÂèó...');
        fireEvent.change(textarea, { target: { value: 'ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÂÜÖÂÆπ' } });
        expect(textarea.value).toBe('ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÂÜÖÂÆπ');
      });
    });

    it('Â∫îËØ•ËÉΩÂ§üÊ∑ªÂä†ÂõæÁâáÈìæÊé•', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        const addButton = screen.getByText('Ê∑ªÂä†ÂõæÁâáÈìæÊé•');
        fireEvent.click(addButton);
      });
    });

    it('Â∫îËØ•ËÉΩÂ§üÂà†Èô§ÂõæÁâáÈìæÊé•', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        const addButton = screen.getByText('Ê∑ªÂä†ÂõæÁâáÈìæÊé•');
        fireEvent.click(addButton);
        
        // Áé∞Âú®Â∫îËØ•Êúâ‰∏§‰∏™ÂõæÁâáËæìÂÖ•Ê°Ü
        const deleteButtons = screen.getAllByText('Âà†Èô§');
        if (deleteButtons.length > 0) {
          fireEvent.click(deleteButtons[0]);
        }
      });
    });

    it('Â∫îËØ•ËÉΩÂ§üËæìÂÖ•ÂõæÁâáURL', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        const imageInputs = screen.getAllByPlaceholderText('ËØ∑ËæìÂÖ•ÂõæÁâáURLÔºåÂ¶Ç https://xxx.com/xxx.jpg');
        fireEvent.change(imageInputs[0], { target: { value: 'https://example.com/image.jpg' } });
        expect(imageInputs[0].value).toBe('https://example.com/image.jpg');
      });
    });
  });

  describe('Êèê‰∫§ÂäüËÉΩ', () => {
    it('Â∫îËØ•ËÉΩÂ§üÊèê‰∫§Áé©ÂÆ∂ÁßÄ', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(async () => {
        // Á≠âÂæÖÂ•ñÂìÅÂä†ËΩΩÂÆåÊàê
        await screen.findByText('ÊµãËØïÂ•ñÂìÅ1');
        
        // ÈÄâÊã©Â•ñÂìÅ
        const prize1 = screen.getByText('ÊµãËØïÂ•ñÂìÅ1');
        fireEvent.click(prize1);
        
        // ËæìÂÖ•ÂÜÖÂÆπ
        const textarea = screen.getByPlaceholderText('ÂàÜ‰∫´‰Ω†ÁöÑÂºÄÁõí‰ΩìÈ™åÔºåÊèèËø∞‰∏Ä‰∏ã‰Ω†ÁöÑÂøÉÊÉÖÂíåÊÑüÂèó...');
        fireEvent.change(textarea, { target: { value: 'ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÂÜÖÂÆπ' } });
        
        // Êèê‰∫§
        const submitButton = screen.getByRole('button', { name: /ÂèëÂ∏ÉÁé©ÂÆ∂ÁßÄ/i });
        fireEvent.click(submitButton);
        
        await waitFor(() => {
          expect(mockApi.post).toHaveBeenCalledWith('/api/community/show/create', {
            user_id: mockUser.id,
            item_id: mockPrizes[0].id,
            order_item_id: mockPrizes[0].order_item_id,
            content: 'ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÂÜÖÂÆπ',
            images: [''],
          });
        });
      });
    });

    it('Êèê‰∫§Â§±Ë¥•Êó∂Â∫îËØ•ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ', async () => {
      mockApi.post.mockRejectedValue(new Error('ÁΩëÁªúÈîôËØØ'));
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(async () => {
        // Á≠âÂæÖÂ•ñÂìÅÂä†ËΩΩÂÆåÊàê
        await screen.findByText('ÊµãËØïÂ•ñÂìÅ1');
        
        // ÈÄâÊã©Â•ñÂìÅ
        const prize1 = screen.getByText('ÊµãËØïÂ•ñÂìÅ1');
        fireEvent.click(prize1);
        
        // ËæìÂÖ•ÂÜÖÂÆπ
        const textarea = screen.getByPlaceholderText('ÂàÜ‰∫´‰Ω†ÁöÑÂºÄÁõí‰ΩìÈ™åÔºåÊèèËø∞‰∏Ä‰∏ã‰Ω†ÁöÑÂøÉÊÉÖÂíåÊÑüÂèó...');
        fireEvent.change(textarea, { target: { value: 'ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÂÜÖÂÆπ' } });
        
        // Êèê‰∫§
        const submitButton = screen.getByRole('button', { name: /ÂèëÂ∏ÉÁé©ÂÆ∂ÁßÄ/i });
        fireEvent.click(submitButton);
        
        await waitFor(() => {
          expect(screen.getByText('ÂèëÂ∏ÉÂ§±Ë¥•')).toBeInTheDocument();
        });
      });
    });
  });

  describe('ÂØºËà™ÂäüËÉΩ', () => {
    it('Â∫îËØ•ËÉΩÂ§üÂèñÊ∂àÂπ∂ËøîÂõû', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        const cancelButton = screen.getByText('ÂèñÊ∂à');
        fireEvent.click(cancelButton);
        expect(mockNavigate).toHaveBeenCalledWith('/shows');
      });
    });

    it('Ê≤°ÊúâÂ•ñÂìÅÊó∂Â∫îËØ•ËÉΩÂ§üË∑≥ËΩ¨Âà∞Áõ≤ÁõíÈ°µÈù¢', async () => {
      mockApi.get.mockResolvedValue({ data: [] });
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        const goToBlindBoxButton = screen.getByText('ÂéªÊäΩÁõ≤Áõí');
        fireEvent.click(goToBlindBoxButton);
        expect(mockNavigate).toHaveBeenCalledWith('/blindboxes');
      });
    });
  });

  describe('ÈîôËØØÂ§ÑÁêÜ', () => {
    it('Â∫îËØ•ËÉΩÂ§üÂ§ÑÁêÜAPIËØ∑Ê±ÇÂ§±Ë¥•', async () => {
      mockApi.get.mockRejectedValue(new Error('ÁΩëÁªúÈîôËØØ'));
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        expect(screen.getByText('ÊöÇÊó†ÂèØÊôíÂçïÂ•ñÂìÅ')).toBeInTheDocument();
      });
    });
  });

  describe('UIÁä∂ÊÄÅ', () => {
    it('Êèê‰∫§ÊåâÈíÆÂú®Êú™ÈÄâÊã©Â•ñÂìÅÊó∂Â∫îËØ•Ë¢´Á¶ÅÁî®', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(() => {
        const submitButton = screen.getByRole('button', { name: /ÂèëÂ∏ÉÁé©ÂÆ∂ÁßÄ/i });
        expect(submitButton).toBeDisabled();
      });
    });

    it('Êèê‰∫§ÊåâÈíÆÂú®ÂÜÖÂÆπ‰∏∫Á©∫Êó∂Â∫îËØ•Ë¢´Á¶ÅÁî®', async () => {
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(async () => {
        // ÈÄâÊã©Â•ñÂìÅ
        const prize1 = screen.getByText('ÊµãËØïÂ•ñÂìÅ1');
        fireEvent.click(prize1);
        
        const submitButton = screen.getByRole('button', { name: /ÂèëÂ∏ÉÁé©ÂÆ∂ÁßÄ/i });
        expect(submitButton).toBeDisabled();
      });
    });

    it('Êèê‰∫§Êó∂Â∫îËØ•ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ', async () => {
      mockApi.post.mockImplementation(() => new Promise(resolve => setTimeout(resolve, 100)));
      const { default: PlayerShowCreate } = await import('../../../src/pages/community/PlayerShowCreate');
      renderWithRouter(<PlayerShowCreate />);
      
      await waitFor(async () => {
        // Á≠âÂæÖÂ•ñÂìÅÂä†ËΩΩÂÆåÊàê
        await screen.findByText('ÊµãËØïÂ•ñÂìÅ1');
        
        // ÈÄâÊã©Â•ñÂìÅ
        const prize1 = screen.getByText('ÊµãËØïÂ•ñÂìÅ1');
        fireEvent.click(prize1);
        
        // ËæìÂÖ•ÂÜÖÂÆπ
        const textarea = screen.getByPlaceholderText('ÂàÜ‰∫´‰Ω†ÁöÑÂºÄÁõí‰ΩìÈ™åÔºåÊèèËø∞‰∏Ä‰∏ã‰Ω†ÁöÑÂøÉÊÉÖÂíåÊÑüÂèó...');
        fireEvent.change(textarea, { target: { value: 'ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÂÜÖÂÆπ' } });
        
        // Êèê‰∫§
        const submitButton = screen.getByRole('button', { name: /ÂèëÂ∏ÉÁé©ÂÆ∂ÁßÄ/i });
        fireEvent.click(submitButton);
        
        await waitFor(() => {
          expect(screen.getByText('ÂèëÂ∏É‰∏≠...')).toBeInTheDocument();
        });
      });
    });
  });
});